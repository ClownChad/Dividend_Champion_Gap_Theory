plot_line <- ggplot(df_prices) + geom_line(aes(x = Price_Date, y = Open)) +
facet_wrap_paginate(~Symbol, ncol = 3, nrow = 3, page = 1)
for (page_num in n_pages(plot_line)){
plot_line + facet_wrap_paginate(~Symbol, ncol = 3, nrow = 3, page = page_num)
}
ggplot(plot_line)
plot_line <- ggplot(df_prices) + geom_line(aes(x = Price_Date, y = Open))
ggplot(df_prices) + geom_line(aes(x = Price_Date, y = Open))
plot(plot_line)
plot_line <- ggplot(df_prices) + geom_line(aes(x = Price_Date, y = Open))
facet_wrap_paginate(~Symbol, ncol = 3, nrow = 3, page = 1)
plot_line <- ggplot(df_prices) + geom_line(aes(x = Price_Date, y = Open)) +
facet_wrap_paginate(~Symbol, ncol = 3, nrow = 3)
for (page_num in n_pages(plot_line)){
plot(
plot_line +
facet_wrap_paginate(~Symbol, ncol = 3, nrow = 3, page = page_num)
)
}
plot_line <- ggplot(df_prices) + geom_line(aes(x = Price_Date, y = Open)) +
facet_wrap_paginate(~Symbol~Increase_Year, ncol = 3, nrow = 3)
plot(plot_line)
lot_line <- ggplot(df_prices) + geom_line(aes(x = Price_Date, y = Open)) +
facet_wrap_paginate(~Symbol, ncol = 3, nrow = 3)
plot_line <- ggplot(df_prices) + geom_line(aes(x = Price_Date, y = Open)) +
facet_wrap_paginate(~Symbol, ncol = 3, nrow = 3)
plot(plot_line)
plot_line <- ggplot(df_prices) +
geom_line(aes(x = Price_Date, y = Open, linetype = Increase_Year)) +
facet_wrap_paginate(~Symbol, ncol = 3, nrow = 3)
plot(plot_line)
plot_line <- ggplot(df_prices) +
geom_line(aes(x = Price_Date, y = Open)) +
facet_wrap_paginate(~Symbol, ncol = 3, nrow = 3)
plot(plot_line)
plot_line <- ggplot(df_prices) +
geom_line(aes(x = Price_Date, y = Open, group = Increase_Year)) +
facet_wrap_paginate(~Symbol, ncol = 3, nrow = 3)
plot(plot_line)
df_prices_blank <- tibble(
Symbol = character(),
Dividend_Date = as.Date(character()),
Increase_Year = numeric(),
Price_Date = as.Date(character()),
Timeframe = character(),
Open = numeric(),
High = numeric(),
Low = numeric(),
Close = numeric())
df_prices <- df_prices_blank
create_row_df_prices <- function(symbol, date_div, date_price, timeframe){
return (tibble(
Symbol = symbol,
Dividend_Date = date_div,
Increase_Year = year(date_div),
Price_Date = date_price,
Timeframe = timeframe,
Open = as.double(df_test$Open[date_price]),
High = as.double(df_test$High[date_price]),
Low = as.double(df_test$Low[date_price]),
Close = as.double(df_test$Close[date_price]),
))
}
add_increase_df_prices <- function(symbol, during_index){
date_before <- index(df_test[during_index-1])
date_during <- index(df_test[during_index])
date_after <- index(df_test[during_index+1])
#Before
df_prices <- df_prices %>%
add_row(create_row_df_prices(symbol, date_during, date_before, 'Before'))
#Div Increase Day
df_prices <- df_prices %>%
add_row(create_row_df_prices(symbol, date_during, date_during, 'During'))
#After
df_prices <- df_prices %>%
add_row(create_row_df_prices(symbol, date_during, date_after, 'After'))
return(df_prices)
}
for (increase_index in index(df_divs)){
# print(increase_index)
cat('On index', increase_index, '\n')
tryCatch({
#Adding a week before and after to account for weekends and holidays
df_test <- getSymbols(
df_divs$Symbol[increase_index],
from = df_divs$Date[increase_index]-7,
to = df_divs$Date[increase_index]+7,
env = NULL
)
names(df_test) <- c(
"Open", "High", "Low", "Close", "Volume", 'Adjusted'
)
during_index <- which(index(df_test) == df_divs$Date[increase_index])
df_prices <- add_increase_df_prices(
df_divs$Symbol[increase_index], during_index
)
}, error = function(e){
print_error(e)
})
}
df_prices_blank <- tibble(
Symbol = character(),
Dividend_Date = as.Date(character()),
Increase_Year = numeric(),
Price_Date = as.Date(character()),
Timeframe = character(),
Open = numeric(),
High = numeric(),
Low = numeric(),
Close = numeric())
df_prices <- df_prices_blank
create_row_df_prices <- function(symbol, date_div, date_price, timeframe){
return (tibble(
Symbol = symbol,
Dividend_Date = date_div,
Increase_Year = year(date_div),
Price_Date = date_price,
Timeframe = timeframe,
Open = as.double(df_test$Open[date_price]),
High = as.double(df_test$High[date_price]),
Low = as.double(df_test$Low[date_price]),
Close = as.double(df_test$Close[date_price]),
))
}
add_increase_df_prices <- function(symbol, during_index){
date_before <- index(df_test[during_index-1])
date_during <- index(df_test[during_index])
date_after <- index(df_test[during_index+1])
#Before
df_prices <- df_prices %>%
add_row(create_row_df_prices(symbol, date_during, date_before, 'Before'))
#Div Increase Day
df_prices <- df_prices %>%
add_row(create_row_df_prices(symbol, date_during, date_during, 'During'))
#After
df_prices <- df_prices %>%
add_row(create_row_df_prices(symbol, date_during, date_after, 'After'))
return(df_prices)
}
for (increase_index in index(df_divs)){
# print(increase_index)
cat('On index', increase_index, '\n')
tryCatch({
#Adding a week before and after to account for weekends and holidays
df_test <- getSymbols(
df_divs$Symbol[increase_index],
from = df_divs$Date[increase_index]-7,
to = df_divs$Date[increase_index]+7,
env = NULL
)
names(df_test) <- c(
"Open", "High", "Low", "Close", "Volume", 'Adjusted'
)
during_index <- which(index(df_test) == df_divs$Date[increase_index])
df_prices <- add_increase_df_prices(
df_divs$Symbol[increase_index], during_index
)
}, error = function(e){
print_error(e)
})
}
View(df_prices)
plot_line <- ggplot(df_prices) +
geom_line(aes(x = Price_Date, y = Open, group = Increase_Year)) +
facet_wrap_paginate(~Symbol, ncol = 3, nrow = 3)
plot(plot_line)
save.image("C:/Users/chadd/OneDrive/Desktop/dividend-champions-gap-theory/env.RData")
plot_line <- ggplot(df_prices) +
geom_line(aes(x = Price_Date, y = Open, group = Increase_Year)) +
facet_wrap_paginate(~Symbol='ABM', ncol = 3, nrow = 3)
plot_line <- ggplot(df_prices$Symbol = 'ABM') +
plot_line <- ggplot(df_prices) +
geom_line(aes(x = Price_Date, y = Open)) +
facet_wrap_paginate(~Symbol, ncol = 3, nrow = 3)
plot(plot_line)
plot_line <- ggplot(df_prices) +
geom_line(aes(x = Price_Date, y = Open)) +
facet_wrap_paginate(~Symbol, ncol = 1, nrow = 1)
plot(plot_line)
plot_line <- ggplot(df_prices) +
geom_line(aes(x = Price_Date, y = Open)) +
facet_wrap_paginate(~Increase_Year~Symbol, ncol = 1, nrow = 1)
plot(plot_line)
plot_line <- ggplot(df_prices) +
geom_line(aes(x = Price_Date, y = Open, group = Increase_Year)) +
facet_wrap_paginate(~Symbol, ncol = 1, nrow = 1)
plot(plot_line)
plot_line <- ggplot(df_prices) +
geom_line(aes(x = Price_Date, y = Open, group = Increase_Year)) +
facet_wrap_paginate(~Symbol~Increase_Year, ncol = 1, nrow = 1)
plot(plot_line)
plot_line <- ggplot(df_prices) +
geom_line(aes(x = Price_Date, y = Open)) +
facet_wrap_paginate(~Symbol~Increase_Year, ncol = 1, nrow = 1)
plot(plot_line)
plot_line <- ggplot(df_prices) +
geom_line(aes(x = Timeframe, y = Open, color = Increase_Year)) +
facet_wrap_paginate(~Symbol, ncol = 1, nrow = 1)
plot(plot_line)
plot_line <- ggplot(df_prices) +
geom_line(aes(x = Timeframe, y = Open, color = Increase_Year)) +
facet_wrap_paginate(~Symbol, ncol = 1, nrow = 1, scales = 'free_y')
plot(plot_line)
plot_line <- ggplot(df_prices) +
geom_line(aes(x = Price_Date, y = Open, color = Increase_Year)) +
facet_wrap_paginate(~Symbol, ncol = 1, nrow = 1, scales = 'free_y')
plot(plot_line)
# Ensure 'Timeframe' is a factor with ordered levels
df_test <- df_prices %>%
mutate(Timeframe = factor(Timeframe, levels = c("Before", "During", "After")))
# Plot
ggplot(df_test, aes(x = Timeframe, y = Open, group = Increase_Year, color = as.factor(Increase_Year))) +
geom_line(aes(linetype = as.factor(Increase_Year))) +  # Different line types for distinction
geom_point(size = 2) +  # Add points for clarity
facet_wrap(~Symbol, scales = "free_y") +  # One chart per stock symbol
labs(title = "Stock Price Changes Around Dividend Increase",
x = "Timeframe",
y = "Open Price",
color = "Increase Year",
linetype = "Increase Year") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity
save.image("C:/Users/chadd/OneDrive/Desktop/dividend-champions-gap-theory/env.RData")
plot_line <- ggplot(df_prices) +
geom_line(aes(x = Price_Date, y = Open, color = Increase_Year)) +
facet_wrap_paginate(Symbol~Increase_Year, ncol = 1, nrow = 1, scales = 'free_y')
plot(plot_line)
plot_line <- ggplot(df_prices) +
goem_line(
data = pick(~Increase_Year == '2024'),
aes(x = Price_Date, y = Open)
) +
facet_wrap_paginate(~Symbol, ncol = 1, nrow = 1, scales = 'free-y')
plot_line <- ggplot(df_prices) +
geom_line(
data = pick(~Increase_Year == '2024'),
aes(x = Price_Date, y = Open)
) +
facet_wrap_paginate(~Symbol, ncol = 1, nrow = 1, scales = 'free-y')
plot_line <- df_prices %>% group_by(Increase_Year) %>%
ggplot() +
geom_line(
data = pick(~Increase_Year == '2024'),
aes(x = Price_Date, y = Open)
) +
facet_wrap_paginate(~Symbol, ncol = 1, nrow = 1, scales = 'free-y')
plot_line <- df_prices %>% group_by(Increase_Year) %>%
ggplot() +
geom_line(aes(x = Price_Date, y = Open)) +
facet_wrap_paginate(~Symbol, ncol = 1, nrow = 1, scales = 'free-y')
plot_line <- df_prices %>% group_by(Increase_Year) %>%
ggplot() +
geom_line(aes(x = Price_Date, y = Open)) +
facet_wrap_paginate(~Symbol, ncol = 1, nrow = 1, scales = 'free_y')
plot(plot_line)
# Ensure 'Timeframe' is a factor with ordered levels
df_test <- df_prices %>%
mutate(Timeframe = factor(Timeframe, levels = c("Before", "During", "After")))
# Plot
ggplot(df_test, aes(x = Timeframe, y = Open, group = Increase_Year, color = as.factor(Increase_Year))) +
geom_line(aes(linetype = as.factor(Increase_Year))) +  # Different line types for distinction
geom_point(size = 2) +  # Add points for clarity
facet_wrap(~Symbol, scales = "free_y") +  # One chart per stock symbol
labs(title = "Stock Price Changes Around Dividend Increase",
x = "Timeframe",
y = "Open Price",
color = "Increase Year",
linetype = "Increase Year") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity
# Ensure 'Timeframe' is a factor with ordered levels
df_test <- df_prices %>%
mutate(Timeframe = factor(Timeframe, levels = c("Before", "During", "After")))
# Plot
ggplot(df_test, aes(x = Timeframe, y = Open, group = Increase_Year, color = as.factor(Increase_Year))) +
geom_line(aes(linetype = as.factor(Increase_Year))) +  # Different line types for distinction
geom_point(size = 2) +  # Add points for clarity
facet_wrap_paginate(~Symbol, ncol = 1, nrow = 1, scales = "free_y") +  # One chart per stock symbol
labs(title = "Stock Price Changes Around Dividend Increase",
x = "Timeframe",
y = "Open Price",
color = "Increase Year",
linetype = "Increase Year") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity
save.image("C:/Users/chadd/OneDrive/Desktop/dividend-champions-gap-theory/env.RData")
View(df_prices)
write.csv(df_prices,"~/Downloads/filename.csv", row.names = FALSE)
path_out = 'C:\\Users\\chadd\\Desktop\\'
write.csv(df_prices ,paste(path_out,'my_file.csv',sep = ''))
write.csv(df_prices ,paste(path_out,'my_file.csv',sep = ''))
# path_out = 'C:\\Users\\chadd\\Desktop\\'
setwd("C:/Users/chadd/Desktop")
# path_out = 'C:\\Users\\chadd\\Desktop\\'
setwd("C:\\Users\\chadd\\Desktop")
# path_out = 'C:\\Users\\chadd\\Desktop\\'
setwd("C://Users//chadd//Desktop")
# path_out = 'C:\\Users\\chadd\\Desktop\\'
setwd("C:/Users/chadd/Desktop")
# path_out = 'C:\\Users\\chadd\\Desktop\\'
setwd("C:/Users/chadd/Downloads")
# path_out = 'C:\\Users\\chadd\\Desktop\\'
setwd("~")
# path_out = 'C:\\Users\\chadd\\Desktop\\'
setwd("~/Downloads")
# path_out = 'C:\\Users\\chadd\\Desktop\\'
setwd("~//Downloads")
setwd("C:/Users/chadd/OneDrive/Desktop/dividend-champions-gap-theory")
write.csv(df_prices, 'prices.csv')
df_prices_sum <- df_prices %>%
pivot_wider(
names_from = c('Increase_Year', 'Timeframe', 'Open')
values_from = 'Open'
df_prices_sum <- df_prices %>%
pivot_wider(
names_from = c('Increase_Year', 'Timeframe', 'Open'),
values_from = 'Open'
)
library('tidyverse')
library('quantmod')
df_prices_sum <- df_prices %>%
pivot_wider(
names_from = c('Increase_Year', 'Timeframe', 'Open'),
values_from = 'Open'
)
View(df_prices_sum)
df_prices_sum <- df_prices %>%
pivot_wider(
names_from = c('Symbol', 'Increase_Year', 'Timeframe'),
values_from = 'Open'
)
View(df_prices_sum)
df_prices_sum <- df_prices %>%
pivot_wider(
names_from = c('Increase_Year', 'Timeframe'),
values_from = 'Open'
)
View(df_prices_sum)
df_prices_sum <- df_prices %>%
pivot_wider(
names_from = c('Increase_Year', 'Timeframe'),
values_from = c('Open', 'High', 'Low', 'Close')
)
View(df_prices_sum)
df_prices_sum <- df_prices %>%
select(-c('Dividend_Date', 'Price_Date')) %>%
pivot_wider(
names_from = c('Increase_Year', 'Timeframe'),
values_from = c('Open', 'High', 'Low', 'Close')
)
View(df_prices_sum)
print(df_divs)
df_divs <- tibble(
Symbol = character(),
Date = as.Date(character()),
Dividend = numeric(),
Increase_Num = numeric())
print_error <- function(e){
cat(symb,
': Calculation or Fetching error - did not add to list\n'
)
print(e)
}
for (symb in symbols){
#Check that current_symb didn't return with nothing (error)
tryCatch({
cat('Fetching ', symb, "...\n", sep = '')
current_symb <- getDividends(
symb,
src = 'yahoo',
from = '2018-01-01',
to = '2024-12-31'
)
if (is.null(current_symb) || nrow(current_symb) == 0) {
cat(symb, ": No dividend data available. Moving on...\n")
next
}
core_data <- drop(coredata(current_symb))
increase_counter <- 0
for (i in seq(length(core_data), 2, -1)){
if (increase_counter == 5){ break }
if (core_data[i] > core_data[i-1]){
df_divs <- df_divs %>% add_row(
Symbol = symb,
Date = as.Date(index(current_symb)[i]),
Dividend = core_data[i],
Increase_Num = increase_counter + 1
)
increase_counter <- increase_counter + 1
}
}
}, error = function(e) {
print_error(e)
})
}
print(df_divs)
df_prices_blank <- tibble(
Symbol = character(),
Dividend_Date = as.Date(character()),
Increase_Num = numeric(),
Increase_Year = numeric(),
Price_Date = as.Date(character()),
Timeframe = character(),
Open = numeric(),
High = numeric(),
Low = numeric(),
Close = numeric())
df_prices <- df_prices_blank
create_row_df_prices <- function(
symbol, increase_num, date_div, date_price, timeframe
){
return (tibble(
Symbol = symbol,
Dividend_Date = date_div,
Increase_Num = increase_num,
Increase_Year = year(date_div),
Price_Date = date_price,
Timeframe = timeframe,
Open = as.double(df_test$Open[date_price]),
High = as.double(df_test$High[date_price]),
Low = as.double(df_test$Low[date_price]),
Close = as.double(df_test$Close[date_price]),
))
}
add_increase_df_prices <- function(symbol, increase_num, during_index){
date_before <- index(df_test[during_index-1])
date_during <- index(df_test[during_index])
date_after <- index(df_test[during_index+1])
#Before
df_prices <- df_prices %>%
add_row(create_row_df_prices(
symbol, increase_num, date_during, date_before, 'Before')
)
#Div Increase Day
df_prices <- df_prices %>%
add_row(create_row_df_prices(
symbol, increase_num, date_during, date_during, 'During')
)
#After
df_prices <- df_prices %>%
add_row(create_row_df_prices(
symbol, increase_num, date_during, date_after, 'After')
)
return(df_prices)
}
for (increase_index in index(df_divs)){
# print(increase_index)
cat('On index', increase_index, '\n')
tryCatch({
#Adding a week before and after to account for weekends and holidays
df_test <- getSymbols(
df_divs$Symbol[increase_index],
from = df_divs$Date[increase_index]-7,
to = df_divs$Date[increase_index]+7,
env = NULL
)
names(df_test) <- c(
"Open", "High", "Low", "Close", "Volume", 'Adjusted'
)
during_index <- which(index(df_test) == df_divs$Date[increase_index])
df_prices <- add_increase_df_prices(
df_divs$Symbol[increase_index],
df_divs$Increase_Num[increase_index],
during_index
)
}, error = function(e){
print_error(e)
})
}
print(df_prices)
setwd("C:/Users/chadd/OneDrive/Desktop/2025.02.25_Dividend_Champion_Gap_Theory/dividend-champions-gap-theory")
write.csv(df_prices, 'prices.csv')
save.image("C:/Users/chadd/OneDrive/Desktop/2025.02.25_Dividend_Champion_Gap_Theory/dividend-champions-gap-theory/env.RData")
df_prices_sum <- df_prices %>%
select(-c('Dividend_Date', 'Price_Date')) %>%
pivot_wider(
names_from = c('Increase_Num', 'Timeframe'),
values_from = c('Open', 'High', 'Low', 'Close')
)
View(df_prices_sum)
df_prices_sum <- df_prices %>%
select(-c('Dividend_Date', 'Increase_Year', 'Price_Date')) %>%
pivot_wider(
names_from = c('Increase_Num', 'Timeframe'),
values_from = c('Open', 'High', 'Low', 'Close')
)
View(df_prices_sum)
save.image("C:/Users/chadd/OneDrive/Desktop/2025.02.25_Dividend_Champion_Gap_Theory/dividend-champions-gap-theory/env.RData")
df_prices_wide <- df_prices %>%
select(-c('Dividend_Date', 'Increase_Year', 'Price_Date')) %>%
pivot_wider(
names_from = c('Increase_Num', 'Timeframe'),
values_from = c('Open', 'High', 'Low', 'Close')
)
View(df_prices_wide)
print(df_prices_wide)
save.image("C:/Users/chadd/OneDrive/Desktop/2025.02.25_Dividend_Champion_Gap_Theory/dividend-champions-gap-theory/env.RData")
save.image("C:/Users/chadd/OneDrive/Desktop/2025.02.25_Dividend_Champion_Gap_Theory/dividend-champions-gap-theory/.RData")
df_prices_wide <- df_prices %>%
select(-c('Increase_Year', 'Price_Date')) %>%
pivot_wider(
names_from = c('Increase_Num', 'Timeframe'),
values_from = c('Open', 'High', 'Low', 'Close')
)
View(df_prices_wide)
df_prices_wide <- df_prices %>%
select(-c('Dividend_Date', 'Increase_Year', 'Price_Date')) %>%
pivot_wider(
names_from = c('Increase_Num', 'Timeframe'),
values_from = c('Open', 'High', 'Low', 'Close')
)
View(df_prices_wide)
